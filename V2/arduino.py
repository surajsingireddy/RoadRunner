from PIL import Image

import numpy as np
import serial
import time
import random as rand

# bmap_bg = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0xb8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0xe4, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x0f, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0xde, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x40, 0xfd, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x77, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0,
#    0xb6, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xed, 0x01, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
#    0xb6, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0xa0, 0xff, 0xbf, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 0x7b, 0xd0, 0x02,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
#    0xf6, 0x7f, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0xf0, 0xff, 0x03, 0xbd, 0x1c, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xea, 0xbf, 0xa3, 0xa3, 0x0a,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xad, 0x7f,
#    0xfb, 0x5f, 0x00, 0x00, 0x80, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0xd4, 0xff, 0xff, 0xff, 0xf7, 0x01, 0x00, 0x00, 0x00, 0xff, 0x2a, 0x00,
#    0x00, 0x00, 0x00, 0x70, 0xff, 0xff, 0x7f, 0xfb, 0x5f, 0x00, 0x00, 0x00,
#    0x80, 0xfe, 0xff, 0x5f, 0x15, 0x00, 0x50, 0xf7, 0x7f, 0x6f, 0xf5, 0x6f,
#    0x1f, 0x00, 0x00, 0x00, 0x54, 0x5b, 0x7a, 0xff, 0xff, 0x5f, 0xf5, 0xff,
#    0xfb, 0xaa, 0xb4, 0xff, 0x17, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x00, 0xe0,
#    0xff, 0xfd, 0xff, 0xbf, 0x8b, 0xa4, 0xaa, 0xfd, 0x03, 0x00, 0x00, 0x00,
#    0xe8, 0xff, 0x83, 0x04, 0x20, 0xff, 0x6f, 0x2b, 0xaa, 0x4a, 0xe9, 0x6f,
#    0x03, 0x00, 0x00, 0x00, 0x60, 0xfb, 0x9f, 0x94, 0x24, 0x80, 0xfe, 0x6b,
#    0xa9, 0x54, 0x9a, 0x7e, 0x01, 0x00, 0x00, 0x00, 0xd0, 0xdf, 0xff, 0xff,
#    0xff, 0xff, 0x2f, 0x84, 0x92, 0x92, 0xf2, 0x7f, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0xf9, 0x7b, 0xa9, 0x4a, 0xed, 0x49, 0x35, 0xa5, 0x54, 0x25, 0x37,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xbf, 0xaa, 0xfe, 0xff, 0x57, 0x49,
#    0x4a, 0x25, 0xd5, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xfa, 0xff,
#    0xfd, 0xab, 0xbf, 0xaa, 0x2a, 0x49, 0xf9, 0x0d, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0xfd, 0xff, 0x27, 0x85, 0xfe, 0x2d, 0x49, 0x95, 0x3e, 0x05,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xac, 0x07, 0x00, 0xe2, 0x55,
#    0x55, 0xaa, 0x8f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
#    0x00, 0x00, 0xfe, 0x57, 0x4a, 0xf9, 0xe1, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xff, 0x55, 0x7f, 0xe8, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xfd,
#    0xff, 0x17, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0xfe, 0xd1, 0xff, 0x22, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x03, 0x00, 0x40, 0x0b, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xef, 0x5f,
#    0x00, 0xd8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0xe8, 0xff, 0xff, 0x6f, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x9f, 0x7e, 0xff, 0x0b, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x12, 0xaa,
#    0xfc, 0x05, 0x60, 0xdb, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x40, 0xff, 0x02, 0x08, 0xe8, 0xff, 0xff, 0xff, 0x0d, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x80, 0xd0, 0x17, 0x00, 0x00, 0xf8, 0xb7, 0xfb, 0xff,
#    0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0xf5, 0x0e, 0x00, 0x00,
#    0x60, 0xff, 0x6f, 0x81, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50,
#    0xfa, 0x01, 0x00, 0x00, 0xf0, 0x7f, 0xaa, 0x20, 0x22, 0x01, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x58, 0xbf, 0x00, 0x00, 0x00, 0x40, 0xa2, 0x00, 0xa0,
#    0x6d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xce, 0x2f, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x58, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x48,
#    0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00,
#    0x00, 0x00, 0x90, 0xc2, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0xae, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
#    0x00, 0x00, 0x00, 0x00]

bmap_bg = [0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfb, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0x01,
   0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x3f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x80, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x23, 0x92,
   0x50, 0x05, 0xfc, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x00, 0x00, 0x0a, 0x00, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x80, 0x50, 0x00, 0xe0, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xa8, 0x22,
   0x04, 0x15, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x0f, 0x20, 0xa4, 0x54, 0x50, 0x00, 0xff, 0xff, 0xdf, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0x4a, 0x89, 0x82, 0x8a, 0x0a, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xf7, 0x25, 0x10, 0x29,
   0x2a, 0x28, 0x28, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff,
   0xff, 0x48, 0xa5, 0x44, 0x91, 0x42, 0x85, 0xfc, 0xfb, 0xff, 0xf7, 0xff,
   0xca, 0xff, 0xff, 0xff, 0xff, 0x11, 0x88, 0x14, 0x25, 0x4a, 0x28, 0xf1,
   0xff, 0xff, 0xff, 0xff, 0x91, 0xff, 0xff, 0xff, 0x7f, 0xa4, 0x52, 0xa2,
   0x48, 0x91, 0x52, 0xf2, 0xfd, 0xdf, 0xff, 0xbf, 0x25, 0xff, 0xff, 0xff,
   0xbd, 0x94, 0x44, 0x8a, 0x12, 0x92, 0x44, 0xe2, 0xfd, 0xff, 0xff, 0xff,
   0x02, 0xfe, 0xff, 0xdf, 0x1f, 0x21, 0xa9, 0x50, 0xa4, 0x24, 0xa9, 0xd4,
   0xff, 0xff, 0xff, 0xfd, 0x06, 0xf0, 0xff, 0xff, 0x5f, 0x4a, 0x12, 0x95,
   0x24, 0x49, 0x0a, 0xc1, 0xb7, 0xbf, 0xff, 0xff, 0xa7, 0xe0, 0xff, 0x5f,
   0x8f, 0x94, 0xaa, 0x24, 0x49, 0xaa, 0x54, 0xaa, 0xd7, 0xff, 0xff, 0xff,
   0x9c, 0x82, 0xf7, 0x5f, 0x2d, 0x51, 0x22, 0x49, 0x52, 0x09, 0x91, 0x84,
   0xb6, 0x7f, 0xff, 0x97, 0xa3, 0x82, 0xff, 0x6f, 0x45, 0x8a, 0x54, 0x92,
   0x24, 0x55, 0x25, 0x29, 0xfb, 0xfd, 0xf7, 0x58, 0xdf, 0x0a, 0xf7, 0xb7,
   0x57, 0xa9, 0x92, 0xa4, 0x2a, 0x41, 0x54, 0x4a, 0xab, 0xff, 0x7f, 0xa9,
   0xf7, 0xb7, 0xfd, 0x6f, 0x8b, 0x12, 0xa5, 0x4a, 0x42, 0xaa, 0x92, 0x24,
   0xef, 0xff, 0xbf, 0xd6, 0xef, 0xbf, 0xf2, 0xdf, 0xab, 0x54, 0x29, 0x92,
   0x54, 0x89, 0x54, 0x49, 0x5e, 0xdf, 0x5d, 0x5b, 0x7f, 0xbf, 0xee, 0xbf,
   0x23, 0x49, 0x52, 0x29, 0x85, 0x52, 0x49, 0x92, 0xf6, 0x7f, 0xe0, 0xa5,
   0xfe, 0x5e, 0x55, 0x55, 0xaa, 0x92, 0x44, 0xa5, 0x54, 0x4a, 0x92, 0xaa,
   0x4a, 0x35, 0x18, 0xd1, 0xff, 0xaf, 0x55, 0xab, 0x92, 0x2a, 0x29, 0x4a,
   0x49, 0xa9, 0x2a, 0x45, 0xaa, 0x1f, 0x41, 0x86, 0x7b, 0x5f, 0xaf, 0x58,
   0x55, 0x55, 0x53, 0x55, 0x2a, 0x4a, 0x6a, 0xaa, 0xaa, 0x0f, 0x4a, 0xdb,
   0xd7, 0xd7, 0x5e, 0x53, 0x49, 0x22, 0x94, 0x94, 0xa9, 0x54, 0x91, 0x24,
   0x55, 0x43, 0xa1, 0xdd, 0x7c, 0xaf, 0xfe, 0x62, 0xab, 0x4a, 0x25, 0xa9,
   0x52, 0x25, 0xa5, 0xaa, 0xaa, 0x21, 0x25, 0xff, 0xdf, 0xab, 0xfe, 0x82,
   0x54, 0xb5, 0x4a, 0x95, 0x24, 0x55, 0x55, 0x55, 0x55, 0x4a, 0xd2, 0xfb,
   0x5f, 0x6b, 0xf9, 0x8f, 0xaa, 0xaa, 0x52, 0x94, 0x4a, 0x49, 0x55, 0x55,
   0x55, 0x95, 0xe4, 0xfe, 0xf5, 0xed, 0x56, 0x19, 0x6d, 0x55, 0xad, 0x55,
   0x55, 0xb5, 0xaa, 0x5a, 0xd4, 0xaa, 0x7a, 0xff, 0xff, 0xea, 0xfd, 0x57,
   0x54, 0x55, 0x29, 0x55, 0x55, 0xa5, 0xaa, 0xaa, 0x94, 0xf2, 0xaa, 0xff,
   0xbf, 0xbd, 0xef, 0x95, 0xe1, 0x6f, 0xdb, 0xaa, 0xaa, 0x5a, 0xab, 0x0f,
   0xa9, 0xd4, 0xed, 0xff, 0xbf, 0xec, 0xff, 0x2f, 0x0d, 0x7f, 0x55, 0x55,
   0x55, 0x55, 0xfd, 0x07, 0x95, 0xba, 0xee, 0xff, 0x5d, 0xbf, 0x7b, 0x55,
   0x15, 0xde, 0x57, 0x55, 0x55, 0xd5, 0xaf, 0xa1, 0xe2, 0xfe, 0xdd, 0xff,
   0xdf, 0xfc, 0xf7, 0x9d, 0x17, 0xf8, 0xbf, 0x55, 0x55, 0xf5, 0xff, 0x44,
   0xaa, 0xbd, 0xfb, 0xff, 0xba, 0xfd, 0x77, 0x6b, 0x2b, 0xc0, 0xff, 0xaa,
   0xfb, 0xaf, 0x0d, 0xb2, 0xf4, 0xf6, 0xff, 0xff, 0xf5, 0xbb, 0xc7, 0x5f,
   0x4d, 0x0b, 0xd0, 0xff, 0xff, 0xff, 0x15, 0x95, 0xb5, 0xfb, 0xde, 0xff,
   0x57, 0x7f, 0xf9, 0x6b, 0x13, 0xf4, 0xff, 0xb7, 0xff, 0x5f, 0xff, 0x77,
   0xab, 0x5e, 0xff, 0xff, 0xf4, 0xd6, 0x4a, 0xdf, 0xf2, 0xac, 0xaa, 0xb6,
   0x77, 0xf7, 0xd6, 0x2d, 0x5a, 0xef, 0xff, 0xff, 0xcf, 0xff, 0x92, 0xaf,
   0x55, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xda, 0xf7, 0xff, 0xff,
   0x7f, 0x6d, 0x7f, 0x7d, 0xbf, 0x8b, 0xff, 0xfe, 0xff, 0xff, 0xdf, 0x4f,
   0xdb, 0xfd, 0xff, 0xff, 0x7f, 0xff, 0xda, 0xfa, 0xf6, 0xff, 0xad, 0x77,
   0xeb, 0x5f, 0x5b, 0xe9, 0xed, 0xfa, 0xff, 0xff, 0xff, 0xf8, 0xf7, 0xd7,
   0xfd, 0xbb, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x6b, 0x7f, 0xfd, 0xff, 0xff,
   0xff, 0xf6, 0xed, 0xdd, 0x57, 0xde, 0xee, 0xaf, 0xcd, 0xbe, 0xf5, 0xdd,
   0x9d, 0xfe, 0xff, 0xff, 0xbf, 0xd5, 0xef, 0x3b, 0xda, 0xfa, 0xef, 0x6f,
   0xff, 0xf7, 0xaf, 0xff, 0xae, 0xda, 0xfb, 0xff, 0xff, 0xf5, 0xf7, 0xcb,
   0xb7, 0x70, 0x5f, 0xb5, 0x5d, 0xbf, 0xf5, 0xff, 0x95, 0xff, 0xff, 0xff,
   0xff, 0xd5, 0xef, 0x57, 0xaa, 0xc5, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff,
   0x93, 0xbe, 0xfe, 0xff, 0xdf, 0x6f, 0xff, 0xae, 0x76, 0xa9, 0xd7, 0xff,
   0xff, 0xff, 0xdf, 0x9f, 0xe5, 0xff, 0xff, 0xff, 0xff, 0xdb, 0xf5, 0xbd,
   0xd7, 0x65, 0xfe, 0x93, 0x64, 0x62, 0xee, 0xdf, 0xd5, 0xff, 0xff, 0xff,
   0xbf, 0xbf, 0xea, 0xf7, 0x6f, 0xad, 0xba, 0x7f, 0xdf, 0xbf, 0xff, 0xff,
   0xea, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xd7, 0xef, 0xfd, 0x57, 0xe5, 0xff,
   0x7f, 0x75, 0xfd, 0x7e, 0xfb, 0xff, 0xff, 0xff, 0xfd, 0xf7, 0xee, 0xbf,
   0xfe, 0xff, 0xff, 0xfa, 0xbd, 0xf7, 0xf7, 0x7f, 0xfd, 0xff, 0xff, 0xff,
   0xf7, 0xff, 0x5d, 0xff, 0xf5, 0xf7, 0xff, 0xbf, 0xef, 0xff, 0xff, 0xbf,
   0xfe, 0xff, 0xff, 0xff, 0xad, 0xff, 0xeb, 0xff, 0xfe, 0xff, 0xff, 0x55,
   0xda, 0xca, 0xd5, 0x67, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0x5f, 0xf9,
   0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xdf, 0xfd, 0xff, 0xff,
   0xff, 0xfd, 0xaf, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe,
   0xbf, 0xfd, 0xff, 0xff, 0xff, 0xf7, 0x7f, 0xad, 0xff, 0xbf, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xef, 0xdf, 0xab,
   0xde, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xbf, 0xfd, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xf7, 0xfd, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0x7f,
   0xff, 0xff, 0xff, 0xff]

x = 0
inp = 0
previousMillis1 = 0
toneSpeed = 350
buttonState = 0
rotaryValue = 0
carSpeed = 2000
invulnFrames = 1000
currentMillis = time.time()
carMillis = currentMillis
colisionMillis = currentMillis
player_pos = 0
SCREEN_WIDTH = 16 #OLED display dimensions
SCREEN_HEIGHT = 8
PLAYER_TOKEN = '>'
ENEMY_TOKEN =['#','%','^','0']
PLAYER_IMG = np.array(Image.open("car2.png").convert('1', dither=0)).astype(np.uint8)
ENEMY_IMG = np.array(Image.open("obst1.png").convert('1', dither=0)).astype(np.uint8)
screenMap = np.zeros((8,16), dtype=str)
bmap = np.zeros((64,128), dtype=np.uint8)

arduino = serial.Serial(port='COM4', baudrate=9600, timeout=0.1)

def PIL_to_bitmap(img):
    bmap = img.convert('1', dither=0).resize((128,64)).tobitmap()
    return [int(i,16) for i in bmap.decode()[77:-3].replace('\n','').split(',')]

def send(msg, is_byte=True):
    if not is_byte: msg = bytes(msg, 'utf-8')
    arduino.write(msg)
    time.sleep(0.05)

def recv():
    time.sleep(0.05)
    return arduino.readall().decode('utf-8')

while True:
    time.sleep(2)
    send(bmap_bg)
    time.sleep(3)
    
    alive = True
    while alive:
        currentMillis = time.time() * 1000
        
        try: inp = int(recv())
        except: pass
        
        if currentMillis - carMillis > carSpeed:
            if inp > 500: player_pos = max(player_pos-1, 0)
            else: player_pos = min(player_pos+1, SCREEN_HEIGHT-1)
            
            screenMap[:,0] = ' '
            screenMap[player_pos, 0] = PLAYER_TOKEN
            
            for i in range(SCREEN_HEIGHT):
                for j in range(SCREEN_WIDTH):
                    if screenMap[i,j] in ENEMY_TOKEN:
                        if ((screenMap[i][j - 1] == PLAYER_TOKEN) and (currentMillis - colisionMillis) >= invulnFrames):
                            screenMap[i][j] = ' '
                            alive = False
                        else :
                            screenMap[i][j-1] = '#'
                            screenMap[i][j] = ' '
            
            if not alive: break
            
            rng = np.random.randint(0,8)
            obstType = np.random.randint(0,4)
            screenMap[rng][SCREEN_WIDTH - 1] = ENEMY_TOKEN[obstType]
            carMillis = currentMillis
        
            for i in range(SCREEN_HEIGHT):
                for j in range(SCREEN_WIDTH):
                    if screenMap[i,j] == PLAYER_TOKEN:
                        bmap[i*8:i*8+8, j*8:j*8+8] = PLAYER_IMG
                    elif (screenMap[i][j] == ENEMY_TOKEN[0]):
                        bmap[i*8:i*8+8, j*8:j*8+8] = ENEMY_IMG
                    elif(screenMap[i][j] == ENEMY_TOKEN[1]):
                        bmap[i*8:i*8+8, j*8:j*8+8] = ENEMY_IMG
                    elif(screenMap[i][j] == ENEMY_TOKEN[2]):
                        bmap[i*8:i*8+8, j*8:j*8+8] = ENEMY_IMG
                    elif(screenMap[i][j] == ENEMY_TOKEN[3]):
                        bmap[i*8:i*8+8, j*8:j*8+8] = ENEMY_IMG
                    else:
                        bmap[i*8:i*8+8, j*8:j*8+8] = np.zeros((8,8), dtype=np.uint8)
            
            # Update Arduino
            print(screenMap)
            img = Image.fromarray(bmap*255, mode='L')
            send(PIL_to_bitmap(img))


# bmap1 = bytes(bmap1)
# bmap2 = bytes(bmap2)

#imgs = [Image.open(f"rowdy{i}.png") for i in range(5)]
#bmaps = [PIL_to_bitmap(img) for img in imgs]

# send(bmaps[0], is_byte=True)